AWSTemplateFormatVersion : '2010-09-09'
Transform : AWS:Serverless-2016-10-31
Description: |
  Local Environment setup

# How to start with AWS SAM and this file template here
#   https://www.youtube.com/watch?v=CIdUU6rNdk4
# Official documentation here
#   https://github.com/awslabs/serverless-application-model
# Policy templates to be used here: 
#   https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json

Globals:
  Function:
    Runtime: python3.7
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  DynamoTableName:
    Description: DynamoDB Table Name
    Type: String
    Default: HostingList
  MySQLHost:
    Type: String
    Default: localhost
  MySQLDBName:
    Type: String
    Default: quehosting
  MySQLUser:
    Type: String
    Default: root
  MySQLPass:
    Type: String
    Default: quehosting.es



Resources:

  ## LOCAL ENVIRONMENT ##
  #######################

  saveSampleDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/save_sample_data
      Handler: save_sample_data.handler
      Events:
        SaveSampleData:
          Type: Api
          Properties:
            Path: /save/sample_data
            Method: post
  
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-build.html#build-container-image
  # https://aws.amazon.com/blogs/compute/using-container-image-support-for-aws-lambda-with-aws-sam/
  searchByHostingTypeLocalFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Environment:
        Variables:
          MYSQL_HOST: !Ref: MySQLHost
          MYSQL_DB: !Ref: MySQLDBName
          MYSQL_USER: !Ref: MySQLUser
          MYSQL_PASS: !Ref: MySQLPass
      Events:
        SearchByHostingType:
          Type: Api
          Properties:
            Path: /search
            Method: post
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ../lambda/search
      DockerTag: v1


  ## PRODUCTION LAMBDAS ##
  ########################

#  searchByHostingTypeFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ../lambda/search
#      Handler: search.handler
#      Environment:
#        Variables:
#          TABLE_NAME: !Ref: DynamoTableName
#      Events:
#        SearchByHostingType:
#          Type: Api
#          Properties:
#            Path: /search
#            Method: post
    